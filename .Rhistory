}
}
for (i in 1:nrow(emission)) {
emission[i,] <- emission[i,] / sum(emission[i,])
}
# Estimate the stationary distribution of the markov chain by counting
init <- c()
for (i in 1:length(hidden)) {
count_init <- 0
for (j in index) {
if (hidden[i] == substr(data[j,3], 1, 1)) {
count_init <- count_init + 1
}
}
init[i] <- count_init / length(index)
}
# return the estimated probabilities for I, E, and T
return(c(unlist(list(transition = transition, emission = emission, init = init))))
}, R = 3)
# compute the 95% confidence intervals for each parameter in I, E, and T
boot.ci(boot, type = "perc", conf = 0.95)
View(boot)
View(boot$t)
# bootstrap 1000 times, sample with replacement the same number of rows as the training data
# estimate the probabilities for I, E, and T from bootstrapped data
# compute the 95% confidence intervals for each parameter in I, E, and T
# bootstrap 1000 times, sample with replacement the same number of rows as the training data
boot <- boot(data = proteins_train, statistic = function(data, index) {
# estimate the probabilities for I, E, and T from bootstrapped data
# calculate the matrix of transition probabilities from the training data of the proteins by maximum likelihood estimation
# calculate by dividing the number of times latent state i is followed by latent state j by the number of times latent state i emits anything
transition <- matrix(0, nrow = length(hidden), ncol = length(hidden))
for (i in index) {
for (j in 1:nchar(data[i,3])-1) {
transition[which(hidden == substr(data[i,3], j, j)), which(hidden == substr(data[i,3], j+1, j+1))] <-
transition[which(hidden == substr(data[i,3], j, j)), which(hidden == substr(data[i,3], j+1, j+1))] + 1
}
}
for (i in 1:nrow(transition)) {
transition[i,] <- transition[i,] / sum(transition[i,])
}
# calculate the matrix of emission probabilities from the training data of the proteins by maximum likelihood estimation
# calculate by dividing the number of times latent state i is followed by observed state j by the number of times latent state i emits anything
emission <- matrix(0, nrow = length(hidden), ncol = length(observed))
for (i in index) {
for (j in 1:nchar(proteins_train[i,3])) {
emission[which(hidden == substr(data[i,3], j, j)), which(observed == substr(data[i,2], j, j))] <-
emission[which(hidden == substr(data[i,3], j, j)), which(observed == substr(data[i,2], j, j))] + 1
}
}
for (i in 1:nrow(emission)) {
emission[i,] <- emission[i,] / sum(emission[i,])
}
# Estimate the stationary distribution of the markov chain by counting
init <- c()
for (i in 1:length(hidden)) {
count_init <- 0
for (j in index) {
if (hidden[i] == substr(data[j,3], 1, 1)) {
count_init <- count_init + 1
}
}
init[i] <- count_init / length(index)
}
# return the estimated probabilities for I, E, and T
return(c(transition, emission, init))
}, R = 100,parallel = "multicore",ncpus = 6)
# compute the 95% confidence intervals for each parameter in I, E, and T
#boot.ci(boot, type = "perc", conf = 0.95)
# bootstrap 1000 times, sample with replacement the same number of rows as the training data
# estimate the probabilities for I, E, and T from bootstrapped data
# compute the 95% confidence intervals for each parameter in I, E, and T
# bootstrap 1000 times, sample with replacement the same number of rows as the training data
boot <- boot(data = proteins_train, statistic = function(data, index) {
# estimate the probabilities for I, E, and T from bootstrapped data
# calculate the matrix of transition probabilities from the training data of the proteins by maximum likelihood estimation
# calculate by dividing the number of times latent state i is followed by latent state j by the number of times latent state i emits anything
transition <- matrix(0, nrow = length(hidden), ncol = length(hidden))
for (i in index) {
for (j in 1:nchar(data[i,3])-1) {
transition[which(hidden == substr(data[i,3], j, j)), which(hidden == substr(data[i,3], j+1, j+1))] <-
transition[which(hidden == substr(data[i,3], j, j)), which(hidden == substr(data[i,3], j+1, j+1))] + 1
}
}
for (i in 1:nrow(transition)) {
transition[i,] <- transition[i,] / sum(transition[i,])
}
# calculate the matrix of emission probabilities from the training data of the proteins by maximum likelihood estimation
# calculate by dividing the number of times latent state i is followed by observed state j by the number of times latent state i emits anything
emission <- matrix(0, nrow = length(hidden), ncol = length(observed))
for (i in index) {
for (j in 1:nchar(proteins_train[i,3])) {
emission[which(hidden == substr(data[i,3], j, j)), which(observed == substr(data[i,2], j, j))] <-
emission[which(hidden == substr(data[i,3], j, j)), which(observed == substr(data[i,2], j, j))] + 1
}
}
for (i in 1:nrow(emission)) {
emission[i,] <- emission[i,] / sum(emission[i,])
}
# Estimate the stationary distribution of the markov chain by counting
init <- c()
for (i in 1:length(hidden)) {
count_init <- 0
for (j in index) {
if (hidden[i] == substr(data[j,3], 1, 1)) {
count_init <- count_init + 1
}
}
init[i] <- count_init / length(index)
}
# return the estimated probabilities for I, E, and T
return(c(transition, emission, init))
}, R = 1000,parallel = "multicore",ncpus = 7)
# compute the 95% confidence intervals for each parameter in I, E, and T
#boot.ci(boot, type = "perc", conf = 0.95)
boot
View(transition)
View(emission)
ls
library(phangorn)
if(!require("phangorn")) {
install.packages("phangorn")
}
if(!require("ape")) {
install.packages("ape")
}
library(phangorn)
library(ape)
ParisRT <- read.dna(ParisRT.txt)
if(!require("phangorn")) {
install.packages("phangorn")
}
if(!require("ape")) {
install.packages("ape")
}
library(phangorn)
library(ape)
ParisRT <- read.dna("ParisRT.txt")
distParis <- dist.dna(ParisRT)
distParis
ParisRT
distParis <- dist.dna(ParisRT)
initTree <- NJ(distParis)
initTree
distParis <- dist.dna(ParisRT)
initTree <- NJ(distParis)
initTree
plot(initTree)
?optim.pml
typeof(ParisRT)
kimura <- pml(tree= initTree, data= phyDat(ParisRT), model= "K80")
kimura
kimura <- pml(tree= initTree, data= phyDat(ParisRT), model= "K80")
kimura$logLik
optimParam <- optim.pml(kimura)
optimParam
typeof(optimParam)
typeof(kimura)
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam
optimParam[['Rate matrix']]
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam$Q
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam$rate
optimParam
optimParam[0]
optimParam[[0]
]
optimParam[['Base frequencies']]
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam$w
optimParam
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam$Q
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam$Q[1]
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam
optimParam2 <- optim.pml(kimura, optQ = TRUE, optNni = TRUE, optEdge = TRUE)
optimParam2$logLik
bootPML <- bootstrap.pml(optimParam2, optNni= TRUE)
?bootstrap.pml
optimParam <- optim.pml(kimura, optQ= TRUE)
optimParam
bootPML <- bootstrap.pml(optimParam2, optNni= TRUE)
bootPML
View(bootPML)
plot(bootPML[[1]])
plot(bootPML[[2]])
bootPML[[1]]
bootPML[[2]]
optimParam
ParisRT
distParis
plotBS(optimParam2, type= "phylogram")
?plotBS
typeof(bootPML)
plotBS(tree= optimParam2, BStrees = bootPML, type= "phylogram")
typeof(optimParam2)
typeof(optimParam2$tree)
optimParam2$tree
plotBS(tree= optimParam2$tree, BStrees = bootPML, type= "phylogram")
windows(width = 10, height = 8)
plotBS(tree= optimParam2$tree, BStrees = bootPML, type= "phylogram")
plotBS(tree= optimParam2$tree, BStrees = bootPML, type= "phylogram")
# Load Libs
library(dplyr)
# Load Libs
library(dplyr)
# Load Libs
library(dplyr)
# Load Libs
library("dplyr")
# Load Libs
library(dplyr)
library(GenomicRanges)
library(foreach)
library(doParallel)
library(xgboost)
library(caret)
install.packages("GenomicRanges")
BiocManager::install("GenomicRanges")
library(dplyr)
library(GenomicRanges)
library(foreach)
library(doParallel)
library(xgboost)
library(caret)
library(ggplot2)
files <- list.files("ML4G_Project_1_Data/")
bed_files <- files[stringr::str_detect(files,"-bed")]
cell_lines <- c("X1","X2","X3")
beds <- list()
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("ML4G_Project_1_Data/",bed_file,"/",cell_line,".bed"),collapse = ""))
if(bed_file == "DNase-bed" ){
tempII$score <- tempII$V7
} else {
tempII$score <- tempII$V5
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds[[cell_line]] <- data.table::rbindlist(temp)
beds[[cell_line]]$type <- as.factor(  beds[[cell_line]]$type )
beds[[cell_line]] <-beds[[cell_line]]  %>% GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "V1",
start.field = "V2",
end.field = "V3")
}
# Load Libs
library(dplyr)
library(GenomicRanges)
library(foreach)
library(doParallel)
library(xgboost)
library(caret)
library(ggplot2)
files <- list.files("data/")
files <- list.files("./data/")
files <- list.files("~/data/")
files <- list.files("~/data")
setwd("~/ETH Zurich/2022-2023/ML4G/Project1")
files <- list.files("~/data")
setwd("~/ETH Zurich/2022-2023/ML4G/Project1")
files <- list.files("~/data")
files <- list.files("data/")
bed_files <- files[stringr::str_detect(files,"-bed")]
cell_lines <- c("X1","X2","X3")
beds <- list()
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("ML4G_Project_1_Data/",bed_file,"/",cell_line,".bed"),collapse = ""))
if(bed_file == "DNase-bed" ){
tempII$score <- tempII$V7
} else {
tempII$score <- tempII$V5
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds[[cell_line]] <- data.table::rbindlist(temp)
beds[[cell_line]]$type <- as.factor(  beds[[cell_line]]$type )
beds[[cell_line]] <-beds[[cell_line]]  %>% GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "V1",
start.field = "V2",
end.field = "V3")
}
tempII <- data.table::fread(paste0(c("data/",bed_file,"/",cell_line,".bed"),collapse = ""))
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("data/",bed_file,"/",cell_line,".bed"),collapse = ""))
if(bed_file == "DNase-bed" ){
tempII$score <- tempII$V7
} else {
tempII$score <- tempII$V5
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds[[cell_line]] <- data.table::rbindlist(temp)
beds[[cell_line]]$type <- as.factor(  beds[[cell_line]]$type )
beds[[cell_line]] <-beds[[cell_line]]  %>% GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "V1",
start.field = "V2",
end.field = "V3")
}
all_peaks2 <- data.table::rbindlist(beds2)
all_peaks2 <- data.table::rbindlist(beds)
all_peaks2 <- data.table::rbindlist(beds)
beds
beds2 <- list()
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("data/",bed_file,"/",cell_line,".bed"),collapse = ""))
if(bed_file == "DNase-bed" ){
tempII$score <- scale(tempII$V7)
} else {
tempII$score <- scale(tempII$V5)
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds2[[cell_line]] <- data.table::rbindlist(temp)
beds2[[cell_line]]$type <- as.factor(  beds2[[cell_line]]$type )
beds2[[cell_line]]$cell_line <- cell_line
}
all_peaks2 <- data.table::rbindlist(beds2)
all_peaks2
ggplot(all_peaks, aes(x=score,fill=cell_line)) +
geom_density(alpha=.4) + facet_grid(type ~ .) + xlim(0,400)
ggplot(all_peaks2, aes(x=score,fill=cell_line)) +
geom_density(alpha=.4) + facet_grid(type ~ .) + xlim(-3,3)
genesTrain <- data.table::fread("data/CAGE-train/X1_train_info.tsv")
genesVal <- data.table::fread("data/CAGE-train/X1_val_info.tsv")
genesTest <- data.table::fread("data/CAGE-train/X3_test_info.tsv")
genes <- rbind(genesTrain,genesVal) %>%
rbind(genesTest) %>%
GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "chr",
start.field = "TSS_start",
end.field = "TSS_end",
strand.field = "strand")
train_and_val_inds <- which(genes$gene_name %in% c(genesTrain$gene_name,genesVal$gene_name))
test_inds <- which(genes$gene_name %in% genesTest$gene_name)
cell_line_gene_inds <- list(train_and_val_inds,
train_and_val_inds,
test_inds)
rF <- 5000
shortIntevals <- promoters(genes,
upstream  = rF,
downstream= rF)
longIntervals <- promoters(genes,
upstream  = 500000 ,
downstream= 500000)
geneOverlaps <- findOverlaps(longIntervals,shortIntevals) %>%
as.data.frame()
geneOverlaps <- split(geneOverlaps,f = geneOverlaps$queryHits)
View(geneOverlaps)
geneOverlaps <- findOverlaps(longIntervals, shortIntevals) %>%
as.data.frame()
geneOverlaps <- split(geneOverlaps, f=geneOverlaps$queryHits)
View(geneOverlaps)
geneOverlaps <- findOverlaps(longIntervals, shortIntevals) %>%
as.data.frame()
geneOverlaps <- split(geneOverlaps, f=geneOverlaps$queryHits)
num_cores <- 3
registerDoParallel(cores = num_cores)
genesTrain <- data.table::fread("ML4G_Project_1_Data/CAGE-train/X1_train_info.tsv")
genesVal <- data.table::fread("ML4G_Project_1_Data/CAGE-train/X1_val_info.tsv")
genesTest <- data.table::fread("ML4G_Project_1_Data/CAGE-train/X3_test_info.tsv")
genes <- rbind(genesTrain,genesVal) %>%
rbind(genesTest) %>%
GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "chr",
start.field = "TSS_start",
end.field = "TSS_end",
strand.field = "strand")
# define gene set indices store in list for for loop
train_and_val_inds <- which(genes$gene_name %in% c(genesTrain$gene_name,genesVal$gene_name))
test_inds <- which(genes$gene_name %in% genesTest$gene_name)
cell_line_gene_inds <- list(train_and_val_inds,
train_and_val_inds,
test_inds)
rF <- 5000
# Use the promoters expansion as the ranges are the TSS
shortIntevals <- promoters(genes,
upstream  = rF,
downstream= rF)
longIntervals <- promoters(genes,
upstream  = 500000 ,
downstream= 500000)
geneOverlaps <- findOverlaps(longIntervals, shortIntevals) %>%
as.data.frame()
geneOverlaps <- split(geneOverlaps, f=geneOverlaps$queryHits)
# Register the parallel backend
num_cores <- 3
registerDoParallel(cores = num_cores)
########################## CREATE FEATURES ##################################
res <- foreach(j = 1:3, .packages = c("dplyr", "GenomicRanges")) %dopar% {
features  <- list() # Initialize features for cell line j
shortOverlaps <- findOverlaps(shortIntevals, beds[[cell_lines[j]]]) %>%
as.data.frame() %>%
mutate(queryHits = factor(queryHits,levels = 1:length(genes))) %>%
group_by(queryHits,.drop = FALSE) %>%
group_split()
LongOverlaps <- findOverlaps(longIntervals, beds[[cell_lines[j]]]) %>%
as.data.frame() %>%
mutate(queryHits = factor(queryHits,levels = 1:length(genes))) %>%
group_by(queryHits,.drop = FALSE) %>%
group_split()
install.packages('IRkernel')
.
install.packages('IRkernel')
library(data.table, quietly = T)
# Load Libraries
library(dplyr, quietly = T)
library(GenomicRanges, quietly = T)
library(foreach, quietly = T)
library(doParallel, quietly = T)
library(xgboost, quietly = T)
library(ggplot2, quietly = T)
library(data.table, quietly = T)
library(dplyr, quietly = T)
library(GenomicRanges, quietly = T)
library(foreach, quietly = T)
library(doParallel, quietly = T)
library(xgboost, quietly = T)
library(ggplot2, quietly = T)
library(data.table, quietly = T)
############################ READ IN DATA ####################################
files <- list.files("../ML4G_Project_1_Data/")
bed_files <- files[stringr::str_detect(files,"-bed")]
# Load the beds, join them and convert them to genomic range objects and
# store them in a list
cell_lines <- c("X1","X2","X3")
beds <- list()
beds2 <- list()
files <- list.files("../ML4G_Project_1_Data/")
bed_files <- files[stringr::str_detect(files,"-bed")]
# Load the beds, join them and convert them to genomic range objects and
# store them in a list
cell_lines <- c("X1","X2","X3")
beds <- list()
beds2 <- list()
files <- list.files("./ML4G_Project_1_Data/")
bed_files <- files[stringr::str_detect(files,"-bed")]
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("../ML4G_Project_1_Data/",bed_file,"/",cell_line,".bed"),collapse = ""))
colnames(tempII)
print(tempII)
if(bed_file == "DNase-bed" ){
tempII$score <- tempII$V7
tempII$score_scaled <- scale(tempII$V7) + 2
} else {
tempII$score <- tempII$V5
tempII$score_scaled <- scale(tempII$V5) + 2
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds[[cell_line]] <- data.table::rbindlist(temp)
beds[[cell_line]]$type <- as.factor(  beds[[cell_line]]$type )
beds2[[cell_line]] <- beds[[cell_line]]
beds2[[cell_line]]$cell_line <- cell_line
beds[[cell_line]] <-beds[[cell_line]]  %>% GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "V1",
start.field = "V2",
end.field = "V3")
}
for (cell_line in cell_lines) {
temp <- list()
for (bed_file in bed_files) {
tempII <- data.table::fread(paste0(c("./ML4G_Project_1_Data/",bed_file,"/",cell_line,".bed"),collapse = ""))
colnames(tempII)
print(tempII)
if(bed_file == "DNase-bed" ){
tempII$score <- tempII$V7
tempII$score_scaled <- scale(tempII$V7) + 2
} else {
tempII$score <- tempII$V5
tempII$score_scaled <- scale(tempII$V5) + 2
}
tempII$type <- bed_file
temp[[bed_file]] <- tempII
}
beds[[cell_line]] <- data.table::rbindlist(temp)
beds[[cell_line]]$type <- as.factor(  beds[[cell_line]]$type )
beds2[[cell_line]] <- beds[[cell_line]]
beds2[[cell_line]]$cell_line <- cell_line
beds[[cell_line]] <-beds[[cell_line]]  %>% GenomicRanges::makeGRangesFromDataFrame(
keep.extra.columns = T,
seqnames.field = "V1",
start.field = "V2",
end.field = "V3")
}
getcwd()
getwd()
